# messages.py

import logging
from aiogram import Bot, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from config import admin_id, gruppo_1_id, gruppo_2_id, gruppo_1_name, gruppo_2_name

logging.basicConfig(level=logging.INFO)

# Creiamo il router per il modulo messaggi
messages_router = Router()

# Stato per il flusso di invio messaggi
user_states = {}

###############################################################################
# Menu Gestione Messaggi
###############################################################################
def messages_menu_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="📨 Invia messaggio", callback_data="messages_send")],
        [InlineKeyboardButton(text="🔙 Indietro", callback_data="messages_back_main")]
    ])
    return kb

async def show_messages_menu(message: Message):
    text = (
        "✉️ <b>Gestione Messaggi</b>\n\n"
        "Da qui puoi inviare messaggi ai gruppi di Clienti e/o Reseller, "
        "con la possibilità di allegare testo, immagini o file.\n\n"
        "Solo l'admin può usare questa funzione."
    )
    try:
        await message.edit_text(text, reply_markup=messages_menu_keyboard())
    except Exception:
        await message.answer(text, reply_markup=messages_menu_keyboard())

###############################################################################
# Scelta Gruppo
###############################################################################
def choose_group_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"📢 {gruppo_1_name}", callback_data="choose_g1"),
            InlineKeyboardButton(text=f"📢 {gruppo_2_name}", callback_data="choose_g2")
        ],
        [InlineKeyboardButton(text="📢 Entrambi", callback_data="choose_both")],
        [InlineKeyboardButton(text="❌ Annulla", callback_data="messages_cancel")]
    ])
    return kb

###############################################################################
# Scelta di fissare il messaggio
###############################################################################
def choose_pin_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="📌 Sì, Pinna il Messaggio", callback_data="pin_yes")],
        [InlineKeyboardButton(text="🚫 No, Non Pinnare", callback_data="pin_no")],
        [InlineKeyboardButton(text="❌ Annulla", callback_data="messages_cancel")]
    ])
    return kb

###############################################################################
# Callback gestione menu
###############################################################################
@messages_router.callback_query(lambda c: c.data.startswith("messages_"))
async def messages_menu_callback_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_id != admin_id:
        await callback_query.message.edit_text("❌ Non sei autorizzato a usare questa sezione.")
        await callback_query.answer()
        return

    if data == "messages_send":
        user_states[user_id] = {"step": "choose_group"}
        await callback_query.message.edit_text("📢 Scegli a quale gruppo inviare il messaggio:", reply_markup=choose_group_keyboard())
        await callback_query.answer()

    elif data == "messages_back_main":
        await callback_query.message.edit_text("🏠 Torno al menu principale...", reply_markup=None)
        await callback_query.answer()

###############################################################################
# Gestione della scelta del gruppo
###############################################################################
@messages_router.callback_query(lambda c: c.data.startswith("choose_"))
async def choose_group_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_id not in user_states or user_states[user_id]["step"] != "choose_group":
        await callback_query.answer()
        return

    if data == "choose_g1":
        user_states[user_id]["group"] = gruppo_1_id
    elif data == "choose_g2":
        user_states[user_id]["group"] = gruppo_2_id
    elif data == "choose_both":
        user_states[user_id]["group"] = "both"
    else:
        await callback_query.answer()
        return

    user_states[user_id]["step"] = "write_message"
    await callback_query.message.edit_text("✏️ Invia ora il messaggio (testo, immagine o file).")
    await callback_query.answer()

###############################################################################
# Gestione del messaggio inviato dall'utente
###############################################################################
@messages_router.message()
async def receive_message_handler(message: Message):
    user_id = message.from_user.id

    if user_id not in user_states or user_states[user_id]["step"] != "write_message":
        return

    user_states[user_id]["message"] = message
    user_states[user_id]["step"] = "choose_pin"

    await message.answer("📌 Vuoi fissare il messaggio nel gruppo?", reply_markup=choose_pin_keyboard())

###############################################################################
# Gestione della scelta di pinnare il messaggio
###############################################################################
@messages_router.callback_query(lambda c: c.data.startswith("pin_"))
async def pin_message_handler(callback_query: CallbackQuery, bot: Bot):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if user_id not in user_states or user_states[user_id]["step"] != "choose_pin":
        await callback_query.answer()
        return

    should_pin = data == "pin_yes"
    group_id = user_states[user_id]["group"]
    message = user_states[user_id]["message"]

    if group_id == "both":
        msg1 = await forward_message_to_group(bot, gruppo_1_id, message)
        msg2 = await forward_message_to_group(bot, gruppo_2_id, message)
        if should_pin:
            await bot.pin_chat_message(gruppo_1_id, msg1.message_id)
            await bot.pin_chat_message(gruppo_2_id, msg2.message_id)
    else:
        sent_message = await forward_message_to_group(bot, group_id, message)
        if should_pin:
            await bot.pin_chat_message(group_id, sent_message.message_id)

    await callback_query.message.edit_text("✅ Messaggio inviato con successo!")
    del user_states[user_id]
    await callback_query.answer()

###############################################################################
# Funzione per inoltrare il messaggio al gruppo corretto
###############################################################################
async def forward_message_to_group(bot: Bot, group_id: int, message: Message):
    if message.text:
        return await bot.send_message(group_id, message.text)
    elif message.photo:
        return await bot.send_photo(group_id, photo=message.photo[-1].file_id, caption=message.caption)
    elif message.document:
        return await bot.send_document(group_id, document=message.document.file_id, caption=message.caption)
    elif message.video:
        return await bot.send_video(group_id, video=message.video.file_id, caption=message.caption)
    elif message.voice:
        return await bot.send_voice(group_id, voice=message.voice.file_id, caption=message.caption)

###############################################################################
# Registrazione Handler
###############################################################################
def register_messages_handlers(router: Router):
    router.callback_query.register(messages_menu_callback_handler, F.data.startswith("messages_"))
    router.callback_query.register(choose_group_handler, F.data.startswith("choose_"))
    router.message.register(receive_message_handler)
    router.callback_query.register(pin_message_handler, F.data.startswith("pin_"))
